{"version":3,"sources":["../../node_modules/node-fetch/browser.js","api/getRating.js","api/getPrice.js","bgScript.js"],"names":["getGlobal","self","window","global","Error","globalObject","module","exports","fetch","default","bind","Headers","Request","Response","getRating","query","response","encodeURIComponent","text","getPrice","winePrice","responsePrice","json","source_data","price","isNaN","Math","round","toFixed","e","setup","chrome","runtime","onMessage","addListener","request","sender","sendResponse","type","then","catch","error"],"mappings":";;AAwBwC,IAAA,EAAA,UAAA,GArBpCA,EAAY,WAIf,GAAoB,oBAATC,KAAwB,OAAOA,KAC1C,GAAsB,oBAAXC,OAA0B,OAAOA,OAC5C,QAAsB,IAAXC,EAA0B,OAAOA,EAC5C,MAAM,IAAIC,MAAM,mCAGbC,EAAeL,IAEnBM,OAAOC,QAAUA,QAAUF,EAAaG,MAGpCH,EAAaG,QAChBD,QAAQE,QAAUJ,EAAaG,MAAME,KAAKP,IAG3CI,QAAQI,QAAUN,EAAaM,QAC/BJ,QAAQK,QAAUP,EAAaO,QAC/BL,QAAQM,SAAWR,EAAaQ;;ACjBhC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAPA,IAAA,EAAA,EAAA,QAAA,eAA+B,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAGhB,eAAeC,EAAUC,GACpC,MAAMC,QAAiB,EAAAR,EAAK,kDAA0CS,mBAAmBF,MAEzF,aADmBC,EAASE;;ACkBhC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAvBA,IAAA,EAAA,EAAA,QAAA,eAA+B,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAGhB,eAAeC,EAASJ,GAErC,IAAIK,EAAY,MAGhB,IACE,MAAMJ,QAAiB,EAAAR,EAAK,4FAAoFS,mBAAmBF,MAGnI,IAAIM,SAFeL,EAASM,QAEHC,YAAYC,MAIrC,OAHIC,MAAMJ,IAAoC,OAAlBA,IACtBD,GAAaM,KAAKC,MAAsB,IAAhBN,GAAuB,KAAKO,QAAQ,IAE3DR,EAGT,MAAOS,GAEL,OAAOT;;ACOJ,aA5BP,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,mBAAsC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAEtC,MAAMU,EAAQ,UACZC,OAAOC,QAAQC,UAAUC,YAAY,SACnCC,EACAC,EACAC,GAiBA,MAfqB,cAAjBF,EAAQG,OACV,EAAAxB,EAAS,SAACqB,EAAQpB,OACfwB,KAAMvB,GAAaqB,EAAa,CAACrB,EAAU,QAC3CwB,MAAOC,IACNJ,EAAa,CAAC,KAAMI,MAGL,aAAjBN,EAAQG,OACV,EAAAnB,EAAQ,SAACgB,EAAQpB,OACdwB,KAAMvB,GAAaqB,EAAa,CAACrB,EAAU,QAC3CwB,MAAOC,IACNJ,EAAa,CAAC,KAAMI,OAInB,KAIXX","file":"bgScript.js","sourceRoot":"../src/bgScript","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(global);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n","import fetch from 'node-fetch';\n\n//Scrape Vivino's search page to find the top matches for the wine being offered on LastBottle\nexport default async function getRating(query) {\n    const response = await fetch(`https://www.vivino.com/search/wines?q=${encodeURIComponent(query)}`);\n    const body = await response.text();\n    return body;\n}\n","import fetch from 'node-fetch';\n\n//Get the price data from Vivino's API. Use a parent ID to aggregate price across vintages.\nexport default async function getPrice(query) {\n  //Set a default value for the wine price in case none is found.\n  let winePrice = \"N/A\";\n  \n  //Get the price of the wine based on the ID pulled from the search results.\n  try{\n    const response = await fetch(`https://api.vivino.com/v/9.0.0/buyable_wines?country_code=us&state=Florida&wine=${encodeURIComponent(query)}`);\n    const data = await response.json();\n\n    let responsePrice = data.source_data.price;\n    if(!isNaN(responsePrice) && responsePrice !== null){\n          winePrice = (Math.round(responsePrice * 100) / 100).toFixed(2);\n    }\n    return winePrice;\n    \n  } \n  catch (e) {\n    //In this case, data.source_data.price did not exist in the response data. That means there is no pricing data available for this wine.\n    return winePrice;\n  }\n}\n","import getRating from \"./api/getRating\";\nimport getPrice from \"./api/getPrice\";\n\nconst setup = async () => {\n  chrome.runtime.onMessage.addListener(function (\n    request,\n    sender,\n    sendResponse\n  ) {\n    if (request.type === \"getRating\") {\n      getRating(request.query)\n        .then((response) => sendResponse([response, null]))\n        .catch((error) => {\n          sendResponse([null, error]);\n        });\n    }\n    if (request.type === \"getPrice\") {\n      getPrice(request.query)\n        .then((response) => sendResponse([response, null]))\n        .catch((error) => {\n          sendResponse([null, error]);\n        });\n    }\n\n    return true;\n  });\n};\n\nsetup();\n"]}